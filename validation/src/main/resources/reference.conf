# reference.conf

# Detections classifications
classification {
  error       = "Error"
  warning     = "Warning"
  alert       = "Alert"
  informal    = "Informal"
  affirmative = "Affirmative"
}

# Detection categories
category {
  usage       = "Usage"
  cardinality = "Cardinality"
  length      = "Length"
  extra       = "Extra"
  unexpected  = "Unexpected"
  invalid     = "Invalid Content"
  unescaped   = "Unescaped Separator"
}

################################################################################
# Usage detections
#
#    There are four types of detections:
#       * RUsage: Raised when an element with R usage is not populated
#       * XUsage:  Raised when an element with X  usage is populated
#       * WUsage:  Raised when an element with W  usage is populated
#       * REUsage: Raised when an element with RE usage is populated
#
#    The template takes one parameter:
#        the location formatted as:  ElementType ElementPath (ElementDescription)
################################################################################

r-usage {
  template = "The required %s is missing"
  category = ${category.usage}
  classification = ${classification.error}
}

x-usage {
  template = "The %s is present whereas it is an unsupported element; Usage = X"
  category = ${category.usage}
  classification = ${classification.error}
}

w-usage {
  template = "The %s is present whereas it is a withdrawn element; Usage = W"
  category = ${category.usage}
  classification = ${classification.error}
}

re-usage {
  template = "%s is missing. Depending on the use case and data availability it may be appropriate to value this element"
  category = ${category.usage}
  classification = ${classification.error}
}

################################################################################
# Cardinality detection
#
#   The cardinality detection is issued when the number of repetitions of an
#   element is not in the specified cardinality range.
#
#   The template takes four parameters:
#     $1 is the location formatted as: ElementType ElementPath (Element Description)
#     $2 is the minimun cardinality
#     $3 is the maximum cardinality
#     $4 is the number of repetitions found
################################################################################

cardinality {
  template = "%s must be in the cardinality range of [%s, %s]; %s occurrences found"
  category = ${category.cardinality}
  classification = ${classification.error}
}

################################################################################
# Length detection
#
#    The length detection is issued when the length of a primitive element
#    is not in the specified length range.
#
#    The template takes four parameters:
#      $1 is the location formatted as: ElementType ElementPath (Element Description)
#      $2 is the minimun length
#      $3 is the maximum length
#      $4 the value of the element
#      $5 the computed length
################################################################################

length {
  template = "The length of %s must be within the range [%s, %s]. Value = '%s' ; Length = %s"
  category = ${category.length}
  classification = ${classification.error}
}

################################################################################
# Extra children detection
#
#    This detection is issued when a complex element has extra children
#
#    The template takes one parameter:
#       the location formatted as: ElementType ElementPath (Element Description)
################################################################################

extra {
  template = "%s has extra children"
  category = ${category.extra}
  classification = ${classification.warning}
}

################################################################################
# Unescaped Sep detection
#
#    This detection is issued when a primitive element contains unescaped separators
#
#    The template takes one parameter:
#       the location formatted as: ElementType ElementPath (Element Description)
################################################################################

unescaped {
  template = "The primitive %s contains at least one unescaped delimiter"
  category = ${category.unescaped}
  classification = ${classification.error}
}

################################################################################
# Unexpected Segment detection
#
#    This detection is issued when an unexpected segment is found at a specific position
#
#    The template takes one parameter: the content representing the segment
################################################################################

unexpected {
  template = "Segment %s is not expected at this location"
  category = ${category.unexpected}
  classification = ${classification.error}
}

################################################################################
# Invalid Segment definition detection
#
#    This detection is issued when an invalid content is found in the message
#
#    The template takes one parameter: the content representing the segment
################################################################################

invalid {
  template = "%s is not a valid segment defintion"
  category = ${category.invalid}
  classification = ${classification.error}
}
